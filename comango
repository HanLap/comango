#!/bin/bash

if [ $(whoami) == "root" ]; then
  echo "Comango should not be run as root. Proceed? (y/n)"
  read yn
  if [ ! "$yn" == "y" ]; then
    exit 0
  fi
  echo "continuing as root"
fi

#------VARIABLES-------#

export COMANGO_DIR="$HOME/.comango"
export REPOS_DIR="$COMANGO_DIR/repos"
export BUILD_DIR="$COMANGO_DIR/build"

export CONFIG_FILE="$COMANGO_DIR/comango.conf"
export PREVIOUS_PROPAGATION="$COMANGO_DIR/previous_propagation"
export CURRENT_BUILD="$COMANGO_DIR/current_build"


export red="`tput setaf 1`"
export green="`tput setaf 2`"
export yellow="`tput setaf 3`"
export blue="`tput setaf 4`"
export cyan="`tput setaf 6`"
export reset="`tput sgr0`"


# echo "${cyan}COMANGO${reset}"


eval "$(grep -v '\[\|#' $COMANGO_DIR/comango.conf)"

test -z $git_url     && echo "git_url not set"     && exit 1
test -z $base_repo   && echo "base_repo not set"   && exit 1
test -z $repo_prefix && echo "repo_prefix not set" && exit 1


mkdir -p $REPOS_DIR $BUILD_DIR

#------FUNCTIONS-------#

function setup() {
  _setup_repo $base_repo
}

function _setup_repo() {
  # remove repro prefix
  local local_name=$(echo $1 | sed -e "s/^[$repo_prefix]*//")
  local repo_dir=$REPOS_DIR/$local_name
  local indent="${2:-0}"
  
  # clone repo
  if [ -d $repo_dir ]; then
    printf "%*s%s\n" $indent '' "${yellow}$local_name${reset}"
  else 
    printf "%*s%s\n" $indent '' "${cyan}cloning $local_name...${reset}"
    git clone -q "$git_url/${1}.git" $repo_dir 1> /dev/null
  fi

  # check dependencies and clone them
  if [ -e $repo_dir/.conf/requires ]; then
    while read p; do
      _setup_repo $repo_prefix$p $((indent+2))
    done < $repo_dir/.conf/requires
  fi


}

# upgrade remote if local changes have been made
function upgrade() {
  echo "${blue}updating remote...${reset}"
  for repo_dir in $REPOS_DIR/*; do
    _update_repo $repo_dir
  done
}

function _update_repo() {
  local local_name=$(basename -a $1)

  cd $1

  # check if local changes exist
  if [ -n "$(git status --porcelain)" ]; then
    printf "%-30s %s\n" "${yellow}$local_name:" "pushing changes...${reset}"
    git add .
    git commit -qm "auto update"
    git push -q
  else
    printf "%-30s %s\n" "${cyan}$local_name:"   "up to date${reset}" 
  fi
}

# function sync() {

# }

# create repository
function create() {
  cd $REPOS_DIR
  git init $1
  cd $1
  gh repo create "$repo_prefix$1" --confirm --public
  git checkout -b main 
  touch .gitignore
  mkdir .conf
  touch .conf/requires
  git add .
  git commit -qm "init"
  git push -qu origin main
}

# copy all files and pipe them trough a template engine
function _build() {
  rm -rf $BUILD_DIR

  mkdir -p $BUILD_DIR/home
  mkdir -p $BUILD_DIR/root

  for repo_dir in $REPOS_DIR/*; do
    # copy files if repo has dir
    test -d $repo_dir/home && cp -r $repo_dir/home $BUILD_DIR/ 
    test -d $repo_dir/root && cp -r $repo_dir/root $BUILD_DIR/
  done

  (cd $BUILD_DIR && 
   find * -type "f,s" > $CURRENT_BUILD)
}

function _replace_templates() {
  echo "nothing to see here"
}

# deletes files that where propagated previously but are missing in current build
function _delete_removed_files() {
  #TODO: accumulate to delete batch and ask confirmation only once
  while read -u 10 file; do
    # check if file exists in current build
    if ! grep -q "$file" "$CURRENT_BUILD"; then
      read -p "${red}$file was removed. delete from system? (y/n)${reset}"
      if [ ! "$yn" == "y" ]; then
        #TODO: not only use home
        full_path=$(echo "$file" | sed -e "s:home:$HOME:")
        test -f $full_path && rm $full_path
      fi
    fi
  done 10< $PREVIOUS_PROPAGATION
}


# propagates files in build directory to their according directory
function _propagate() {
  # clean old propagation file
  rm -f $PREVIOUS_PROPAGATION



  cd $BUILD_DIR/home
  # find all files in build dir
  files=$(find * -type "f,s")

  # for each file distribute
  for file in $files; do
    echo "propagating $file"
    # TODO: more complex logic that checks for merge conflicts
    cp --parents $file $HOME
    # save to propagation file
    echo home/$file >> $PREVIOUS_PROPAGATION
  
  done
}

function help() {
  echo "
   usage: comango <setup|update|sync|create>"
}

function config() {
  ed=${EDITOR:-vi}
  $ed $CONFIG_FILE
}


$@
